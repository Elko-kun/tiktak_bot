import os
import time
import schedule
from telegram import Bot
from telegram.ext import Updater, CommandHandler
import datetime
import re
import threading

# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

if not TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Render")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_settings = {}

def get_user_settings(chat_id):
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "name": "",
            "schedule": "1 minute", 
            "is_active": True
        }
    return user_settings[chat_id]

def start(update, context):
    chat_id = update.effective_chat.id
    user_name = update.effective_user.first_name
    settings = get_user_settings(chat_id)
    settings["name"] = user_name
    
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
        f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!\n"
        f"‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n\n"
        f"‚öôÔ∏è /settime - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        f"üìã /help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    print(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({chat_id})")

def help_command(update, context):
    update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" 
        "/settime - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚è∞ –ü—Ä–∏–º–µ—Ä—ã:\n"
        "/settime 18:00 - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 18:00\n"
        "/settime 30 minutes - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"
    )

def set_time(update, context):
    chat_id = update.effective_chat.id
    
    if not context.args:
        update.message.reply_text(
            "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:\n"
            "–ü—Ä–∏–º–µ—Ä: /settime 18:00\n" 
            "–ò–ª–∏: /settime 30 minutes"
        )
        return
    
    time_input = " ".join(context.args)
    settings = get_user_settings(chat_id)
    
    if re.match(r'^\d{1,2}:\d{2}$', time_input):
        settings['schedule'] = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_input}"
        update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ {time_input}!")
    elif re.match(r'^(\d+)\s+(minutes?)$', time_input.lower()):
        match = re.match(r'^(\d+)\s+(minutes?)$', time_input.lower())
        minutes = match.group(1)
        settings['schedule'] = f"–∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç" 
        update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç!")
    else:
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")

def send_notifications():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    active_users = {cid: settings for cid, settings in user_settings.items() if settings["is_active"]}
    
    if not active_users:
        print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return
    
    current_time = datetime.datetime.now().strftime("%H:%M:%S")
    print(f"üîî [{current_time}] –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {len(active_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    
    bot = Bot(token=TOKEN)
    
    for chat_id, settings in active_users.items():
        try:
            send_message(bot, chat_id, settings['name'])
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")

def send_message(bot, chat_id, user_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        messages = [
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üîî –í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤! üíß",
            f"{user_name}, ‚è∞ –æ—Ç–æ—Ä–≤–∏—Ç–µ—Å—å –æ—Ç —ç–∫—Ä–∞–Ω–∞! üëÄ", 
            f"üí° {user_name}, –≤—Ä–µ–º—è —Ä–∞–∑–º—è—Ç—å—Å—è! üèÉ‚Äç‚ôÇÔ∏è",
            f"üåø {user_name}, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Å–∞–Ω–∫—É! ü™ë",
            f"üíß {user_name}, –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã! ü•§"
        ]
        
        import random
        text = random.choice(messages)
        
        bot.send_message(chat_id=chat_id, text=text)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_name}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {chat_id}: {e}")

def run_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    print("üïí –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–ü–£–©–ï–ù!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    schedule.every(1).minutes.do(send_notifications)
    
    print("üîÑ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    
    while True:
        schedule.run_pending()
        time.sleep(1)

def main():
    print("=" * 50)
    print("üöÄ –ë–û–¢ –ó–ê–ü–£–°–ö–ê–ï–¢–°–Ø –ù–ê RENDER")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º updater
    updater = Updater(TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤  
    dp = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("settime", set_time))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler)
    scheduler_thread.daemon = True
    scheduler_thread.start()
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üìù –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
